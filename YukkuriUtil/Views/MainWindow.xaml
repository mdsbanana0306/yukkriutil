<Window x:Name="window" x:Class="YukkuriUtil.Views.MainWindow"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
		xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
		xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
		xmlns:v="clr-namespace:YukkuriUtil.Views"
		xmlns:vm="clr-namespace:YukkuriUtil.ViewModels"
		Title="YukkuriUtil" Height="350" Width="525"
		>

	<Window.DataContext>
		<vm:MainWindowViewModel/>
	</Window.DataContext>

	<i:Interaction.Triggers>
		<l:InteractionMessageTrigger Messenger="{Binding Messenger}" MessageKey="OpenSettingWindow">
			<l:TransitionInteractionMessageAction/>
		</l:InteractionMessageTrigger>

		<l:InteractionMessageTrigger Messenger="{Binding Messenger}" MessageKey="CloseWindow">
			<l:WindowInteractionMessageAction/>
		</l:InteractionMessageTrigger>

		<!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
		<!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
		<!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

		<!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
		<i:EventTrigger EventName="ContentRendered">
			<l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
		</i:EventTrigger>

		<!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
		<i:EventTrigger EventName="Closed">
			<l:DataContextDisposeAction/>
		</i:EventTrigger>

		<!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

	</i:Interaction.Triggers>

	<Grid>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="7*"/>
			<ColumnDefinition Width="3*"/>
		</Grid.ColumnDefinitions>
		<Grid.RowDefinitions>
			<RowDefinition Height="*"/>
			<RowDefinition Height="auto" />
		</Grid.RowDefinitions>

		<Grid Grid.Column="0" Grid.Row="0">
			<Grid.RowDefinitions>
				<RowDefinition Height="auto"/>
				<RowDefinition Height="5*"/>
				<RowDefinition Height="auto"/>
				<RowDefinition Height="5*"/>
			</Grid.RowDefinitions>


            <TextBlock Grid.Row="0" Text="字幕"/>

            <v:IMETextBox Grid.Row="1" Text="{Binding ShowText}" AcceptsReturn="True">
				<i:Interaction.Triggers>
					<i:EventTrigger EventName="TextChanged">
						<i:Interaction.Behaviors>
							<ei:ConditionBehavior>
								<ei:ConditionalExpression>
									<ei:ComparisonCondition RightOperand="" LeftOperand="{Binding ShowText}"/>
								</ei:ConditionalExpression>
							</ei:ConditionBehavior>
						</i:Interaction.Behaviors>

						<l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="EnableCopyText"/>
					</i:EventTrigger>
				</i:Interaction.Triggers>
			</v:IMETextBox>

			<Grid Grid.Row="2">
				<Grid.ColumnDefinitions>
					<ColumnDefinition/>
					<ColumnDefinition/>
				</Grid.ColumnDefinitions>
				
				<TextBlock Grid.Column="0" Text="発声記号"/>
				<CheckBox Grid.Column="1" Content="字幕をコピー" HorizontalAlignment="Right" IsTabStop="False" IsChecked="{Binding ShouldTextCopy}"/>
			</Grid>
            <v:IMETextBox Grid.Row="3" Text="{Binding VoiceText}" AcceptsReturn="True">
				<i:Interaction.Triggers>
					<i:EventTrigger EventName="GotFocus">
						<l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="DisableCopyText"/>
					</i:EventTrigger>
				</i:Interaction.Triggers>
			</v:IMETextBox>
		</Grid>

		<Border Grid.Column="1" Grid.Row="0" Background="{Binding AreaColor}">
			<i:Interaction.Triggers>
				<i:EventTrigger EventName="MouseLeftButtonDown">
					<l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="DragStart" MethodParameter="{Binding ElementName=window, Mode=OneWay}"/>
				</i:EventTrigger>
			</i:Interaction.Triggers>

			<TextBlock Text="{Binding AreaText}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
		</Border>

		<Grid Grid.Column="0" Grid.Row="1">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="auto"/>
			</Grid.ColumnDefinitions>

			<ComboBox Grid.Column="0" ItemsSource="{Binding VoiceSettings, Mode=OneWay}" SelectedIndex="{Binding SelectionVoice}" IsTabStop="False">
				<ComboBox.ItemTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding Name}"/>
					</DataTemplate>
				</ComboBox.ItemTemplate>
			</ComboBox>
			<TextBlock Grid.Column="1" Text="{Binding SelectionProfile.Name, StringFormat=プロファイル: {0}}"/>
		</Grid>
		<Button Grid.Column="1" Grid.Row="1" Content="設定" IsTabStop="False">
			<i:Interaction.Triggers>
				<i:EventTrigger EventName="Click">
					<l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="OpenSettingWindow"/>
				</i:EventTrigger>
			</i:Interaction.Triggers>
		</Button>
	</Grid>
</Window>
